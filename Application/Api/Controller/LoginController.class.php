<?phpnamespace Api\Controller;use User\Api\UserApi;use Think\Controller;class LoginController extends Controller{    public function __construct(){        parent::__construct();        /* 读取数据库中的配置 */        $config =   S('DB_CONFIG_DATA');        if(!$config){            $config =   api('Config/lists');            S('DB_CONFIG_DATA',$config);        }        C($config);        /*添加配置*/    }    /*检测绑定*/    protected function checkBind($token,$uid){        $map['token']=$token;        $map['uid']=$uid;        $map['status']=1;        $isExists=M('baidu_user')->where($map)->getField('id');        return $isExists;    }    /*绑定*/    protected function bindToken($token,$uid,$type){        $arr['token']=$token;        $arr['type']=$type;        $arr['uid']=$uid;        $arr['status']=1;        $arr['create_time']=time();        M('baidu_user')->add($arr);        $push=A('Addons://Baidupush/push');        $push->__construct('','',$arr['type']);        if($arr['type']==1){            $push->pushMessage_android('感谢您注册fille',1,$arr['token']);        }elseif($arr['type']==2){            $push->pushMessage_ios('感谢您注册fille',1,$arr['token']);        }    }    /* 注册页面 */    public function register()    {        $username=I('username');        $password=I('password');        $email=I('email');        $token=I('token');        $type=I('type');        $type=$type?$type:1;        if(!C('USER_ALLOW_REGISTER')){            $this->apiError(0,'注册已关闭');        }        $email=$email?$email:'mail'.time().mt_rand(1000,9999).'@mail.com';        $phone=intval($username);        if(!$username || !$password){            $this->apiError(0,'参数错误');        }        if($this->checkNick(I('nickname'))){            $this->apiError(0,'昵称已存在');        }        if (IS_POST) { //注册用户            /* 调用注册接口注册用户 */            $firstField=array('nickname','headimg','city','sex','height','weight','age','phone');            $postdata=I('post.');            if(is_numeric($postdata['username'])){                $postdata['phone']=$postdata['username'];            }            foreach($postdata as $key=>$v){                if(!in_array($key,$firstField)){                    unset($postdata[$key]);                }            }            $User = new UserApi;            $uid = $User->register($username, $password, $email,$phone);            if (0 < $uid) { //注册成功                D('Member')->login($uid);                M('member')->where(array('uid'=>$uid))->save($postdata);                /*绑定推送*///                if($token && !$this->checkBind($token,$uid)){//                    $this->bindToken($token,$uid,$type);//                }                /*注册容联*/                $count=$this->newRonglian($username);                if($count['status']=='000000'){                    $count['id']=$uid;                    unset($count['status']);                    M('ucenter_member')->save($count);                }                $arr['subAccountSid']=$count['subAccountSid'];                $arr['subToken']=$count['subToken'];                $arr['voipAccount']=$count['voipAccount'];                $arr['voipPwd']=$count['voipPwd'];                $arr['ukey']=$this->newKey($uid);                $per=C('USER_DATE_SXF');                $coin=C("USER_DATE_COIN");                $coin=$coin*$per/100;                $arr['freezing_coin']=C("USER_DATE_COIN");                $arr['phone_coin']=C("USER_WATCH_PHONE");                $arr['custom']=C('USER_CUSTOM');                $arr['shop_onoff']=C('SHOP_ONOFF');                $arr['company']="http://".$_SERVER['HTTP_HOST'].U('Msg/company');                $arr['sxf']=$coin;                $arr['uid']=$uid;                $arr['pay_im']=C('PAY_IM');                $this->apiSuccess('成功',$arr);            } else { //注册失败，显示错误信息                $this->apiError($uid,$this->showRegError($uid));            }        } else { //显示注册表单            $this->apiError(0,'非法操作');        }    }    /*注册容联*/    protected function newRonglian($username){        $res=A('Addons://Ronglian/Ronglian')->createSubAccount($username);        return $res;    }	/*登录*/	public function login(){		$username=I('username');		$password=I('password');        $token=I('token');        $type=I('type');        $type=$type?$type:1;		if(!$password || !$username){			$this->apiError(0, '未知的用户');		}		/* 调用UC登录接口登录 */        $user = new UserApi;        /*用户名类型 （1-用户名，2-邮箱，3-手机，4-UID）*/        /*$type=1;*/        $uid = $user->login($username, $password,1);        if (0 < $uid) { //UC登录成功            /* 登录用户 */            $Member = D('Member');            if($Member->login($uid)){ //登录用户                $arr['ukey']=$this->getKey($uid);                if(!$arr['ukey']){                    $arr['ukey']=$this->newKey($uid);                }                $userInfo=$this->getUserInfo($uid);                if($userInfo['vip']){                    /*注册容联*/                    $info=M('ucenter_member')->find($uid);                    if(!$info['subaccountsid']){                        $count=$this->newRonglian($username);                        if($count['status']=='000000'){                            $count['id']=$uid;                            unset($count['status']);                            M('ucenter_member')->save($count);                        }                        $arr['subAccountSid']=$count['subaccountsid'];                        $arr['subToken']=$count['subtoken'];                        $arr['voipAccount']=$count['voipaccount'];                        $arr['voipPwd']=$count['voippwd'];                    }else{                        $arr['subAccountSid']=$info['subaccountsid'];                        $arr['subToken']=$info['subtoken'];                        $arr['voipAccount']=$info['voipaccount'];                        $arr['voipPwd']=$info['voippwd'];                    }                }else{                    $arr['subAccountSid']='';                    $arr['subToken']='';                    $arr['voipAccount']='';                    $arr['voipPwd']='';                }                /*绑定推送*///                if($token && !$this->checkBind($token,$uid)){//                    $this->bindToken($token,$uid,$type);//                }                $per=C('USER_DATE_SXF');                $coin=C("USER_DATE_COIN");                $coin=$coin*$per/100;                $arr['freezing_coin']=C("USER_DATE_COIN");                $arr['phone_coin']=C("USER_WATCH_PHONE");                $arr['custom']=C('USER_CUSTOM');                $arr['shop_onoff']=C('SHOP_ONOFF');                $arr['company']="http://".$_SERVER['HTTP_HOST'].U('Msg/company');                $arr['sxf']=$coin;                $arr['uid']=$uid;                $arr['pay_im']=C('PAY_IM');                $this->apiSuccess('成功',$arr);            } else {                $this->apiError(0,$Member->getError());            }        } else { //登录失败            switch ($uid) {                case -1:                    $error = '用户不存在或被禁用！';                    break; //系统级别禁用                case -2:                    $error = '密码错误！';                    break;                default:                    $error = $uid;                    break; // 0-接口参数错误（调试阶段使用）            }            $this->apiError($uid,$error);        }	}    /*获取用户信息*/    protected function getUserInfo($uid){        $info=S('userinfo_'.$uid);        if(empty($info)){            $field=array('uid','nickname','sex','birthday','headimg','vip','city','video','phoneout','height','weight','phone');            $info=M('member')->field($field)->find($uid);            if($info){                S('userinfo_'.$uid,$info);            }        }        return $info;    }    /*检测最高级*/    protected function checkBigLevel($uid){        $info=$this->getUserInfo($uid);        if(!$info['vip']){            return false;        }        $map['status']=1;        $bigVip=M('user_vip')->where($map)->order('level desc')->getField('id');        if($bigVip==$info['vip']){            return true;        }else{            return false;        }    }    /*获取jid*/    protected function getJid($uid){        $map['status']=1;        $map['id']=$uid;        $jid=M('ucenter_member')->where($map)->getField('jid');        return $jid;    }	private function http($url, $params, $method = 'GET', $header = array(), $multi = false){				$opts = array(				CURLOPT_TIMEOUT        => 30,				CURLOPT_RETURNTRANSFER => 1,				CURLOPT_SSL_VERIFYPEER => 0,				CURLOPT_SSL_VERIFYHOST => 1,				CURLOPT_HTTPHEADER     => $header		);			/* 根据请求类型设置特定参数 */		switch(strtoupper($method)){			case 'GET':				$param = is_array($params)?'?'.http_build_query($params):'';				$opts[CURLOPT_URL] = $url . $param;				break;			case 'POST':				//判断是否传输文件				//$params = $multi ? $params : http_build_query($params);				$opts[CURLOPT_URL] = $url;				$opts[CURLOPT_POST] = 1;				$opts[CURLOPT_POSTFIELDS] = $params;				$opts[CURLOPT_REFERER]=$url;				break;			default:				throw new \Think\ThinkException('不支持的请求方式！');		}			/* 初始化并执行curl请求 */								$ch = curl_init();		curl_setopt_array($ch, $opts);		$data  = curl_exec($ch);		$error = curl_error($ch);		curl_close($ch);						return  $data;	}    /*检测用户名*/    public function checkUserName(){        $name=I('post.username');        $isExists=M('ucenter_member')->where(array('username'=>$name))->getField('id');        if($isExists){            $this->apiError(0,'已存在');        }else{            $this->apiSuccess('success');        }    }    /*检测昵称*/    public function checkNickname(){        $nickname=I('post.nickname');        $isExists=M('member')->where(array('nickname'=>$nickname))->getField('uid');        if($isExists){            $this->apiError(0,'已存在');        }else{            $this->apiSuccess('success');        }    }    /*检测昵称*/    protected function checkNick($nickname){        $map['nickname']=$nickname;        $isExists=M('member')->where($map)->getField('uid');        return $isExists;    }    /**     * 获取用户注册错误信息     * @param  integer $code 错误编码     * @return string        错误信息     */    public function showRegError($code = 0)    {        switch ($code) {            case -1:                $error = '用户名长度必须在4-16个字符以内！';                break;            case -2:                $error = '用户名被禁止注册！';                break;            case -3:                $error = '用户名被占用！';                break;            case -4:                $error = '密码长度必须在6-30个字符之间！';                break;            case -5:                $error = '邮箱格式不正确！';                break;            case -6:                $error = '邮箱长度必须在4-32个字符之间！';                break;            case -7:                $error = '邮箱被禁止注册！';                break;            case -8:                $error = '邮箱被占用！';                break;            case -9:                $error = '手机格式不正确！';                break;            case -10:                $error = '手机被禁止注册！';                break;            case -11:                $error = '手机号被占用！';                break;            case -20:                $error = '用户名只能由数字、字母和"_"组成！';                break;            case -30:                $error = '昵称被占用！';                break;            case -31:                $error = '昵称被禁止注册！';                break;            case -32:                $error = '昵称只能由数字、字母、汉字和"_"组成！';                break;            case -33:                $error = '昵称不能少于两个字！';                break;            default:                $error = '未知错误24';        }        return $error;    }    /*返回成功信息*/    protected function apiSuccess($message, $extra=null) {        return $this->apiReturn(true, 0, $message, $extra);    }    /*返回失败信息*/    protected function apiError($error_code, $message, $extra=null) {        return $this->apiReturn(false, $error_code, $message, $extra);    }    protected function apiReturn($success, $error_code=0, $message=null, $extra=null) {        //生成返回信息        $result = array();        $result['success'] = $success;        $result['error_code'] = $error_code;        if($message !== null) {            $result['message'] = $message;        }        foreach($extra as $key=>$value) {            $result[$key] = $value;        }        //将返回信息进行编码        $format = $_REQUEST['format'] ? $_REQUEST['format'] : 'json';//返回值格式，默认json        $format = strtolower($format);        if(in_array($format, array('json','xml','jsonp','eval'))){            $this->ajaxReturn($result,$format);        }else{            $_GET['format'] = 'json';            $_REQUEST['format'] = 'json';            return $this->apiError(400, "format参数错误");        }    }    /*检测ukey*/    protected function checkKey($key){        $uid=M('ukey')->where(array('ukey'=>$key,'status'=>1))->getField('uid');        return $uid;    }    /*获取ukey*/    protected function getKey($uid){        $key=M('ukey')->where(array('uid'=>$uid,'status'=>1))->getField('ukey');        return $key;    }    /*生成ukey*/    protected function newKey($uid){        if($key=$this->getKey($uid)){            return $key;        }        $key=getkey();        if($this->checkKey($key)){            $this->newKey($uid);        }        $ukey=array(            'uid'=>$uid,            'ukey'=>$key,            'createtime'=>time(),            'updatetime'=>time(),            'status'=>1        );        $res=M('ukey')->add($ukey);        if(!$res){            $this->newKey($uid);        }        return $key;    }    public function test(){        $path=cover_image('Data/111.jpg');        echo '<img src="'.__ROOT__.$path.'" />';        die;    }}?>